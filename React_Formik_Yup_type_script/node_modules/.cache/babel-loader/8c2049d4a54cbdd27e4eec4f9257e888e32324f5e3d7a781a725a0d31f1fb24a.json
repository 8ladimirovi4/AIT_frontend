{"ast":null,"code":"var _jsxFileName = \"/Users/vlleo/Desktop/AIT local/AIT_lessons/React_Formik_Yup_type_script/src/components/LoginForm/LoginForm.tsx\",\n  _s = $RefreshSig$();\n// step 1: импортируем useFormik\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Button from \"components/Button/Button\";\nimport Input from \"components/Input/Input\";\nimport { LoginFormWrapper, LoginFormTitle, InputsContainer } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  const schema = Yup.object().shape({\n    email: Yup.string().required(\"Email is required\").email(\"Does not match with email format\").min(7, \"Minimum number of symbpols is 7\"),\n    password: Yup.string().strict().required(\"Password should be required\").min(3, \"The minimum length of the password should be 3\").max(20, \"The maximum length of the password should be 20\").uppercase(\"The password should be in uppercase\")\n  });\n\n  // step 2: создаем объект formik, который будет контролировать нашу форму LoginForm\n  // useFormik - принимает в качестве обязательного аргумента объект с необходимыми парраметрами\n  const formik = useFormik({\n    initialValues: {\n      // ключем у initialValues должен быть name наших инпутов,\n      // а значение - дефолтовое значение которое будет при монтировании компонента\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: schema,\n    // Функция, которая собирает данные с формы и мы возможность что-то с ними сделать(например: отправить их на сервер)\n    onSubmit: (values, helpers) => {\n      console.log(\"submit works\");\n      console.log(values);\n      console.log(helpers);\n\n      // Пример того как можно отправить данные на сервер в onSubmit\n      // const response = await fetch(\"url\", {\n      //   method: \"POST\",\n      //   body: JSON.stringify(values),\n      // });\n    }\n  });\n  console.log(formik);\n\n  // console.log(formik.values.email);\n  // console.log(formik.values.password)\n\n  // Контороль элементов форм с помощью useState\n  // const [emailValue, setEmailValue] = useState<string>(\"\");\n  // const [passwordValue, setPasswordValue] = useState<string>(\"\");\n\n  // const onChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n  //   setPasswordValue(event.target.value);\n  // };\n\n  // const onChangeEmail = (event: ChangeEvent<HTMLInputElement>) => {\n  //   setEmailValue(event.target.value);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(LoginFormWrapper, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(LoginFormTitle, {\n      children: \"Login form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"login-email\",\n        placeholder: \"Enter your email\",\n        name: \"email\",\n        label: \"Email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        error: formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: formik.values.password,\n        onChange: formik.handleChange,\n        id: \"login-password\",\n        placeholder: \"Enter your password\",\n        name: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        error: formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      name: \"Login\",\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useFormik","Yup","Button","Input","LoginFormWrapper","LoginFormTitle","InputsContainer","jsxDEV","_jsxDEV","LoginForm","_s","schema","object","shape","email","string","required","min","password","strict","max","uppercase","formik","initialValues","validationSchema","onSubmit","values","helpers","console","log","handleSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","name","label","value","onChange","handleChange","error","errors","type","_c","$RefreshReg$"],"sources":["/Users/vlleo/Desktop/AIT local/AIT_lessons/React_Formik_Yup_type_script/src/components/LoginForm/LoginForm.tsx"],"sourcesContent":["\n// step 1: импортируем useFormik\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport Button from \"components/Button/Button\";\nimport Input from \"components/Input/Input\";\n\nimport { LoginFormValues } from \"./types\";\nimport { LoginFormWrapper, LoginFormTitle, InputsContainer } from \"./styles\";\n\nfunction LoginForm() {\n  const schema = Yup.object().shape({\n    email: Yup.string()\n      .required(\"Email is required\")\n      .email(\"Does not match with email format\")\n      .min(7, \"Minimum number of symbpols is 7\"),\n      password: Yup.string().strict().required(\"Password should be required\")\n      .min(3,\"The minimum length of the password should be 3\")\n      .max(20, \"The maximum length of the password should be 20\")\n      .uppercase(\"The password should be in uppercase\")\n  });\n\n  // step 2: создаем объект formik, который будет контролировать нашу форму LoginForm\n  // useFormik - принимает в качестве обязательного аргумента объект с необходимыми парраметрами\n  const formik = useFormik({\n    initialValues: {\n      // ключем у initialValues должен быть name наших инпутов,\n      // а значение - дефолтовое значение которое будет при монтировании компонента\n      email: \"\",\n      password: \"\",\n    } as LoginFormValues,\n    validationSchema: schema,\n    // Функция, которая собирает данные с формы и мы возможность что-то с ними сделать(например: отправить их на сервер)\n    onSubmit: (values: LoginFormValues, helpers) => {\n      console.log(\"submit works\");\n      console.log(values);\n      console.log(helpers);\n\n      // Пример того как можно отправить данные на сервер в onSubmit\n      // const response = await fetch(\"url\", {\n      //   method: \"POST\",\n      //   body: JSON.stringify(values),\n      // });\n    },\n  });\n\n  console.log(formik);\n\n  // console.log(formik.values.email);\n  // console.log(formik.values.password)\n\n  // Контороль элементов форм с помощью useState\n  // const [emailValue, setEmailValue] = useState<string>(\"\");\n  // const [passwordValue, setPasswordValue] = useState<string>(\"\");\n\n  // const onChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n  //   setPasswordValue(event.target.value);\n  // };\n\n  // const onChangeEmail = (event: ChangeEvent<HTMLInputElement>) => {\n  //   setEmailValue(event.target.value);\n  // };\n\n  return (\n    <LoginFormWrapper onSubmit={formik.handleSubmit}>\n      <LoginFormTitle>Login form</LoginFormTitle>\n      <InputsContainer>\n        <Input\n          id=\"login-email\"\n          placeholder=\"Enter your email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.errors.email}\n        />\n        <Input\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          id=\"login-password\"\n          placeholder=\"Enter your password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          error={formik.errors.password}\n        />\n      </InputsContainer>\n      <Button name=\"Login\" type=\"submit\" />\n    </LoginFormWrapper>\n  );\n}\n\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}