{"ast":null,"code":"var _jsxFileName = \"/Users/vlleo/Desktop/AIT local/AIT_lessons/React_Formik_Yup_type_script/src/pages/Weather/Weather.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Input from \"components/Input/Input\";\nimport Button from \"components/Button/Button\";\nimport WeatherInfo from \"./components/WeatherInfo/WeatherInfo\";\nimport WeatherError from \"./components/WeatherError/WeaherError\";\nimport { WeatherWrapper, Header, Main, WeatherForm, WeatherButtonWrapper, InputButtonWrapper, Loading } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Weather() {\n  _s();\n  // Контролируем Input\n  const [city, setCity] = useState(\"\");\n  // В этом стейте мы будем хранить успешно пришедшие данные с бекенда, но только те которые нам нужны для отображения\n  const [weatherInfo, setWeatherInfo] = useState(undefined);\n  // В этом стейте будут зраниться данные об ошибке, которая нам пришли с сервера\n  const [weatherError, setWeatherError] = useState(undefined);\n  // isLoading нам нужен как индикатор загрузки, чтобы мы его показывали в момент ожиданиия данных по сети\n  const [isLoading, setLoading] = useState(false);\n  // APP_ID у каждого свой, найти его на можно на сайте у себя в зарегестрированном профиле\n  const APP_ID = \"eea75aae6dbe00233ac1efadf2d99a2a\";\n  // По  этому URL мы получаем данные из сервиса openweathermap\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APP_ID}`;\n  const onChangeCity = event => {\n    setCity(event.target.value);\n  };\n  const getWeatherInfo = async () => {\n    // Тут проверяем пустое ли у нас поле, если да, то показываем alert и прерываем ф-ю\n    if (city.trim().length === 0) {\n      return alert(\"Enter city name\");\n    }\n\n    // очищаем 2 стейта weatherInfo и weatherError, т.к при каждом новом запросе\n    // нужно скрывать контейнеры со старой инфорацией об ошибке или погоде\n    setWeatherInfo(undefined);\n    setWeatherError(undefined);\n    //т.к у нас начинается запрос, мы показыаем индикатор загрузки\n    setLoading(true);\n\n    // делаем зарпрос в openweatherapp и получаем обьект Response(там храниться инфа об ответе на запрос)\n    // и получаем data - там будут храниться либо данные об ошибке, либо данные о погоде\n    const response = await fetch(URL);\n    const data = await response.json();\n    console.log(response.ok);\n    console.log(data);\n    if (response.ok) {\n      var _data$weather$;\n      // Тут пишем логику работы с данными о погоде\n      setLoading(false);\n      setWeatherInfo({\n        temp: `${Math.round(data.main.temp - 273.15)}°`,\n        icon: `http://openweathermap.org/img/w/${data === null || data === void 0 ? void 0 : (_data$weather$ = data.weather[0]) === null || _data$weather$ === void 0 ? void 0 : _data$weather$.icon}.png`,\n        cityName: `${data.name}`\n      });\n    } else {\n      // Тут пишем логику работы с ошибкой\n      setLoading(false);\n      setWeatherError({\n        cod: data.cod,\n        message: data.message\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WeatherWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      children: /*#__PURE__*/_jsxDEV(WeatherForm, {\n        children: [/*#__PURE__*/_jsxDEV(InputButtonWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter city name\",\n            onChange: onChangeCity,\n            value: city,\n            name: \"city\",\n            id: \"weather-city\",\n            isWhite: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(WeatherButtonWrapper, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              name: \"Search\",\n              onClick: getWeatherInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(Loading, {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), !!weatherInfo && /*#__PURE__*/_jsxDEV(WeatherInfo, {\n          temp: weatherInfo.temp,\n          icon: weatherInfo.icon,\n          cityName: weatherInfo.cityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), !!weatherError && /*#__PURE__*/_jsxDEV(WeatherError, {\n          error: weatherError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(Weather, \"fhqQaIpdTcoHFpVd2MBh4xMTXKs=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["useState","Input","Button","WeatherInfo","WeatherError","WeatherWrapper","Header","Main","WeatherForm","WeatherButtonWrapper","InputButtonWrapper","Loading","jsxDEV","_jsxDEV","Weather","_s","city","setCity","weatherInfo","setWeatherInfo","undefined","weatherError","setWeatherError","isLoading","setLoading","APP_ID","URL","onChangeCity","event","target","value","getWeatherInfo","trim","length","alert","response","fetch","data","json","console","log","ok","_data$weather$","temp","Math","round","main","icon","weather","cityName","name","cod","message","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","id","isWhite","onClick","error","_c","$RefreshReg$"],"sources":["/Users/vlleo/Desktop/AIT local/AIT_lessons/React_Formik_Yup_type_script/src/pages/Weather/Weather.tsx"],"sourcesContent":["import { useState, ChangeEvent } from \"react\";\n\nimport Input from \"components/Input/Input\";\nimport Button from \"components/Button/Button\";\n\nimport WeatherInfo from \"./components/WeatherInfo/WeatherInfo\";\nimport WeatherError from \"./components/WeatherError/WeaherError\";\n\nimport { WeatherInfoData, WeatherErrorData } from \"./types\";\nimport {\n  WeatherWrapper,\n  Header,\n  Main,\n  WeatherForm,\n  WeatherButtonWrapper,\n  InputButtonWrapper,\n  Loading,\n} from \"./styles\";\n\nfunction Weather() {\n  // Контролируем Input\n  const [city, setCity] = useState<string>(\"\");\n  // В этом стейте мы будем хранить успешно пришедшие данные с бекенда, но только те которые нам нужны для отображения\n  const [weatherInfo, setWeatherInfo] = useState<WeatherInfoData | undefined>(\n    undefined\n  );\n  // В этом стейте будут зраниться данные об ошибке, которая нам пришли с сервера\n  const [weatherError, setWeatherError] = useState<\n    WeatherErrorData | undefined\n  >(undefined);\n  // isLoading нам нужен как индикатор загрузки, чтобы мы его показывали в момент ожиданиия данных по сети\n  const [isLoading, setLoading] = useState<boolean>(false);\n  // APP_ID у каждого свой, найти его на можно на сайте у себя в зарегестрированном профиле\n  const APP_ID: string = \"eea75aae6dbe00233ac1efadf2d99a2a\";\n  // По  этому URL мы получаем данные из сервиса openweathermap\n  const URL: string = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APP_ID}`;\n\n  const onChangeCity = (event: ChangeEvent<HTMLInputElement>) => {\n    setCity(event.target.value);\n  };\n\n  const getWeatherInfo = async () => {\n    // Тут проверяем пустое ли у нас поле, если да, то показываем alert и прерываем ф-ю\n    if (city.trim().length === 0) {\n      return alert(\"Enter city name\");\n    }\n\n    // очищаем 2 стейта weatherInfo и weatherError, т.к при каждом новом запросе\n    // нужно скрывать контейнеры со старой инфорацией об ошибке или погоде\n    setWeatherInfo(undefined);\n    setWeatherError(undefined);\n    //т.к у нас начинается запрос, мы показыаем индикатор загрузки\n    setLoading(true);\n\n    // делаем зарпрос в openweatherapp и получаем обьект Response(там храниться инфа об ответе на запрос)\n    // и получаем data - там будут храниться либо данные об ошибке, либо данные о погоде\n    const response = await fetch(URL);\n    const data = await response.json();\n\n    console.log(response.ok);\n    console.log(data);\n\n    if (response.ok) {\n      // Тут пишем логику работы с данными о погоде\n      setLoading(false);\n      setWeatherInfo({\n        temp: `${Math.round(data.main.temp - 273.15)}°`,\n        icon: `http://openweathermap.org/img/w/${data?.weather[0]?.icon}.png`,\n        cityName: `${data.name}`,\n      });\n    } else {\n      // Тут пишем логику работы с ошибкой\n      setLoading(false);\n      setWeatherError({ cod: data.cod, message: data.message });\n    }\n  };\n\n  return (\n    <WeatherWrapper>\n      <Header>Weather App</Header>\n      <Main>\n        {/* Тут нужно показывать компоненты WheatherInfo или WeatherError\n        в зависимоти от того какие данные придут, с ошибкой или с информацией о погоде */}\n        <WeatherForm>\n          <InputButtonWrapper>\n            <Input\n              placeholder=\"Enter city name\"\n              onChange={onChangeCity}\n              value={city}\n              name=\"city\"\n              id=\"weather-city\"\n              isWhite\n            />\n            <WeatherButtonWrapper>\n              <Button name=\"Search\" onClick={getWeatherInfo} />\n            </WeatherButtonWrapper>\n          </InputButtonWrapper>\n          {isLoading && <Loading>Loading...</Loading>}\n          {!!weatherInfo && (\n            <WeatherInfo\n              temp={weatherInfo.temp}\n              icon={weatherInfo.icon}\n              cityName={weatherInfo.cityName}\n            />\n          )}\n          {!!weatherError && <WeatherError error={weatherError} />}\n        </WeatherForm>\n      </Main>\n    </WeatherWrapper>\n  );\n}\n\nexport default Weather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}